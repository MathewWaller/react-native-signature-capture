def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

apply plugin: 'com.android.library'

def isNewArchitectureEnabled() {
    return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

android {
    compileSdkVersion safeExtGet('compileSdkVersion', 34)
    
    namespace 'com.rssignaturecapture'

    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 21)
        targetSdkVersion safeExtGet('targetSdkVersion', 34)
        versionCode 1
        versionName "1.0"
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    
    lintOptions {
        disable 'GradleCompatible'
    }
    
    packagingOptions {
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libjsc.so'
    }
}

repositories {
    google()
    mavenCentral()
}

dependencies {
    implementation 'com.facebook.react:react-native:+'
    implementation "androidx.appcompat:appcompat:${safeExtGet('androidxAppCompatVersion', '1.6.1')}"
}

// Fix for Gradle task dependency issues using a safer approach
afterEvaluate { project ->
    // Define task dependency patterns
    def addTaskDependencies = { ->
        project.tasks.matching { it.name.contains('package') && it.name.contains('Resources') }.all { packageTask ->
            project.tasks.matching { it.name.contains('generate') && it.name.contains('ResValues') }.all { generateTask ->
                // Match variants (debug/release)
                def packageVariant = packageTask.name.replaceAll('package|Resources', '').toLowerCase()
                def generateVariant = generateTask.name.replaceAll('generate|ResValues', '').toLowerCase()
                
                if (packageVariant == generateVariant) {
                    packageTask.dependsOn generateTask
                }
            }
        }
    }
    
    // Apply the dependencies
    addTaskDependencies()
    
    // Also apply when tasks are added later
    project.tasks.whenTaskAdded { addTaskDependencies() }
}