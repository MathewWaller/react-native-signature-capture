def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

apply plugin: 'com.android.library'

def isNewArchitectureEnabled() {
    return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

android {
    compileSdkVersion safeExtGet('compileSdkVersion', 34)
    
    namespace 'com.rssignaturecapture'

    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 21)
        targetSdkVersion safeExtGet('targetSdkVersion', 34)
        versionCode 1
        versionName "1.0"
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    
    lintOptions {
        disable 'GradleCompatible'
    }
    
    packagingOptions {
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libjsc.so'
    }
}

repositories {
    google()
    mavenCentral()
}

dependencies {
    implementation 'com.facebook.react:react-native:+'
    implementation "androidx.appcompat:appcompat:${safeExtGet('androidxAppCompatVersion', '1.6.1')}"
}

// Ensure proper task ordering for resource generation
afterEvaluate {
    tasks.withType(com.android.build.gradle.internal.tasks.MergeResources).configureEach { task ->
        task.dependsOn tasks.withType(com.android.build.gradle.tasks.GenerateResValues)
    }
}

// Additional fix for cross-project task dependencies
gradle.projectsEvaluated {
    rootProject.allprojects { project ->
        project.tasks.withType(com.android.build.gradle.internal.tasks.MergeResources).configureEach { mergeTask ->
            if (mergeTask.path.contains('reactnativesignaturecapture')) {
                rootProject.allprojects { otherProject ->
                    otherProject.tasks.withType(com.android.build.gradle.tasks.GenerateResValues).configureEach { generateTask ->
                        if (generateTask.path.contains('react-native-signature-capture')) {
                            // Match variants (debug/release)
                            def mergeVariant = mergeTask.name.replaceAll('package|Resources', '').toLowerCase()
                            def generateVariant = generateTask.name.replaceAll('generate|ResValues', '').toLowerCase()
                            if (mergeVariant == generateVariant) {
                                mergeTask.dependsOn generateTask
                            }
                        }
                    }
                }
            }
        }
    }
}